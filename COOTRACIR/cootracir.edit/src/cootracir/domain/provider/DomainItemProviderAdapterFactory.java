/**
 */
package cootracir.domain.provider;

import cootracir.domain.util.DomainAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DomainItemProviderAdapterFactory extends DomainAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DomainItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link cootracir.domain.Analista} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnalistaItemProvider analistaItemProvider;

	/**
	 * This creates an adapter for a {@link cootracir.domain.Analista}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnalistaAdapter() {
		if (analistaItemProvider == null) {
			analistaItemProvider = new AnalistaItemProvider(this);
		}

		return analistaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cootracir.domain.Bus} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusItemProvider busItemProvider;

	/**
	 * This creates an adapter for a {@link cootracir.domain.Bus}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusAdapter() {
		if (busItemProvider == null) {
			busItemProvider = new BusItemProvider(this);
		}

		return busItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cootracir.domain.Cajero} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CajeroItemProvider cajeroItemProvider;

	/**
	 * This creates an adapter for a {@link cootracir.domain.Cajero}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCajeroAdapter() {
		if (cajeroItemProvider == null) {
			cajeroItemProvider = new CajeroItemProvider(this);
		}

		return cajeroItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cootracir.domain.Conductor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConductorItemProvider conductorItemProvider;

	/**
	 * This creates an adapter for a {@link cootracir.domain.Conductor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConductorAdapter() {
		if (conductorItemProvider == null) {
			conductorItemProvider = new ConductorItemProvider(this);
		}

		return conductorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cootracir.domain.DetalleRegistro} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DetalleRegistroItemProvider detalleRegistroItemProvider;

	/**
	 * This creates an adapter for a {@link cootracir.domain.DetalleRegistro}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDetalleRegistroAdapter() {
		if (detalleRegistroItemProvider == null) {
			detalleRegistroItemProvider = new DetalleRegistroItemProvider(this);
		}

		return detalleRegistroItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cootracir.domain.Domain} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainItemProvider domainItemProvider;

	/**
	 * This creates an adapter for a {@link cootracir.domain.Domain}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainAdapter() {
		if (domainItemProvider == null) {
			domainItemProvider = new DomainItemProvider(this);
		}

		return domainItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cootracir.domain.FactoryGestionHumana} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FactoryGestionHumanaItemProvider factoryGestionHumanaItemProvider;

	/**
	 * This creates an adapter for a {@link cootracir.domain.FactoryGestionHumana}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFactoryGestionHumanaAdapter() {
		if (factoryGestionHumanaItemProvider == null) {
			factoryGestionHumanaItemProvider = new FactoryGestionHumanaItemProvider(this);
		}

		return factoryGestionHumanaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cootracir.domain.FactoryGestionInventario} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FactoryGestionInventarioItemProvider factoryGestionInventarioItemProvider;

	/**
	 * This creates an adapter for a {@link cootracir.domain.FactoryGestionInventario}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFactoryGestionInventarioAdapter() {
		if (factoryGestionInventarioItemProvider == null) {
			factoryGestionInventarioItemProvider = new FactoryGestionInventarioItemProvider(this);
		}

		return factoryGestionInventarioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cootracir.domain.Liquidacion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LiquidacionItemProvider liquidacionItemProvider;

	/**
	 * This creates an adapter for a {@link cootracir.domain.Liquidacion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLiquidacionAdapter() {
		if (liquidacionItemProvider == null) {
			liquidacionItemProvider = new LiquidacionItemProvider(this);
		}

		return liquidacionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cootracir.domain.Registrador} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RegistradorItemProvider registradorItemProvider;

	/**
	 * This creates an adapter for a {@link cootracir.domain.Registrador}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRegistradorAdapter() {
		if (registradorItemProvider == null) {
			registradorItemProvider = new RegistradorItemProvider(this);
		}

		return registradorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link cootracir.domain.Ruta} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RutaItemProvider rutaItemProvider;

	/**
	 * This creates an adapter for a {@link cootracir.domain.Ruta}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRutaAdapter() {
		if (rutaItemProvider == null) {
			rutaItemProvider = new RutaItemProvider(this);
		}

		return rutaItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (analistaItemProvider != null) analistaItemProvider.dispose();
		if (busItemProvider != null) busItemProvider.dispose();
		if (cajeroItemProvider != null) cajeroItemProvider.dispose();
		if (conductorItemProvider != null) conductorItemProvider.dispose();
		if (detalleRegistroItemProvider != null) detalleRegistroItemProvider.dispose();
		if (domainItemProvider != null) domainItemProvider.dispose();
		if (factoryGestionHumanaItemProvider != null) factoryGestionHumanaItemProvider.dispose();
		if (factoryGestionInventarioItemProvider != null) factoryGestionInventarioItemProvider.dispose();
		if (liquidacionItemProvider != null) liquidacionItemProvider.dispose();
		if (registradorItemProvider != null) registradorItemProvider.dispose();
		if (rutaItemProvider != null) rutaItemProvider.dispose();
	}

}
